공개된 API 요소에는 항상 문서화 주석을 작성하라

- API 잘 사용하려면 문서화도 중요
- 코드가 변경되면 함께 수정
- 자바에서는 자바독(Javadoc)이라는 유틸리티가 도와줌

문서화 주석을 작성하는 규칙
- 자바5 @literal
- 자바5 @code
- 자바8 @implSpec
- 자바9 @index

**API를 올바로 문서화하려면 공개된 모든 클래스, 인터페이스, 메서드, 필드 선언에 문서화 주석을 달아야 한다**
- 기본 생성자는 문서화 주석 사용할 수 없으므로 사용하면 안됨
- 유지보수까지 생각한다면 비공개 클래스, 인터페이스, 생성자, 메서드, 필드에도 주석


**메서드용 문서화 주석에는 해당 메서드와 클라이언트 사이의 규약을 명료하게 기술해야 한다**
- 어떻게 동작하는지가 아니라 무엇을 하는지를 기술 (how가 아닌 what)
- 클라이언트가 해당 메서드를 호출하기 위한 전제조건
   ㄴ @throws 태그로 비검사 예외를 선언하여 암시적으로 기술
   ㄴ 비검사 예외 하나가 전재조건 하나와 연결
   ㄴ @param 태그를 이용해 조건에 영향받는 매개변수를 기술
- 메서드가 성공적으로 수행된 후에 만족해야 하는 사후조건


부작용도 문서화 필요
- 시스템 상태 변화를 가져오는 것
ex) 백그라운드 스레드를 시작시키는 메서드


메서드의 계약을 완벽하게 기술하려면
- 모든 매개변수에 @param 태그
- 반환 타입이 void가 아니라면 @return 태그


예시01
- @throws 절에 사용한 {@code} 태그 
   ㄴ 태그로 감싼 내용을 코드용 폰트로 렌더링
   ㄴ 태그로 감싼 내용에 포함된 HTML 요소나 다른 자바독 태그를 무시
- "this list"에서 "this"는 호출된 메서드가 자리하는 객체


@implSpec
예시02 
   - 자기사용 패턴에 추가해 다른 프로그래머들이 해당 메서드를 올바로 재정의하는 방법을 명시
   - 해당 메서드와 하위 클래스 사이의 계약을 설명
   - 하위 클래스들이 그 메서드를 상속하거나 super 키워드를 이용해 호출할 때 그 메서드가 어떻게 동작하는지
-  자바독 명령줄에서 `-tag "implSpec:a:implementation Requirements:"` 스위치 켜지 않으면 @implSpec 태그를 무시함


@literal
- API 설명에 <, >, & 등의 HTML 메타문자를 포함시키는 방법
- {@literal} 태그로 감싸는것
- {@code} 와 달리 코드 폰트로 렌더링하지 않음


문서화 주석의 첫 번째 문장은 해당 요소의 요약 설명으로 간주
ex) "이 리스트에서 지정한 위치의 원소를 반환한다."
- 한 클래스 안에서 요약 설명이 똑같은 멤버(혹은 생성자) 둘 이상이면 안됨
- 다중정의된 메서드 특히 주의
- 요약설명에는 마침표 주의
ex) "머스터드 대령이나 Mrs. 피콕 같은 용의자." -> 첫번째 마침표 까지가 요약설명으로 간주 ('피'는 소문자가 아닌 문자)
- 기준은 <마침표><공백><다음 문장 시작> 패턴
- <공백>은 스페이스, 탭, 줄바꿈 / <다음 문장 시작>은 '소문자가 아닌' 문자



